{"version":3,"sources":["Components/Card.js","Images/fring.jpg","Images/guss.jpg","Images/hank.jpg","Images/hector.jpg","Images/Jimmy.jpg","Images/lydia.jpg","Images/mike.jpg","Images/pinkman.jpg","Images/skyler.jpg","Images/todd.jpg","Images/walt.jpg","Images/walter.jpg","Components/MemoryGame.js","App.js","index.js"],"names":["Card","id","color","game","flippedCount","setFlippedCount","flippedIndexes","setFlippedIndexes","useState","flipped","set","useSpring","opacity","transform","config","mass","tension","friction","console","log","useEffect","indexOf","setTimeout","state","onClick","newIndexes","push","div","className","style","interpolate","o","t","backgroundImage","MemoryGame","options","setOptions","startTime","highScore","setHighScore","setStartTime","setGame","colors","Fring","Guss","Hank","Hector","Jimmy","Lydia","Mike","Pinkman","Skyler","Todd","Walt","Walter","newGame","i","firstOption","colorId","secondOption","shuffledGame","sort","Math","random","some","card","length","alert","window","location","reload","map","index","App","setInterval","prevOptions","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c19cec9.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useSpring, animated as a } from \"react-spring\";\r\n\r\nfunction Card({\r\n    id,\r\n    color,\r\n    game,\r\n    flippedCount,\r\n    setFlippedCount,\r\n    flippedIndexes,\r\n    setFlippedIndexes,\r\n  }) {\r\n    const [flipped, set] = useState(false)\r\n    const {transform, opacity} = useSpring({\r\n      opacity: flipped ? 1 : 0,\r\n      transform: `perspective(600px) rotateX(${flipped ? 180 : 0}deg)`,\r\n      config: {mass: 5, tension: 500, friction: 80},\r\n    })\r\n    console.log(color)\r\n  \r\n    useEffect(() => {\r\n      if (flippedIndexes[2] === true && flippedIndexes.indexOf(id) > -1) {\r\n        setTimeout(() => {\r\n          set(state => !state)\r\n          setFlippedCount(flippedCount + 1)\r\n          setFlippedIndexes([])\r\n        }, 1000)\r\n      } else if (flippedIndexes[2] === false && id === 0) {\r\n        setFlippedCount(flippedCount + 1)\r\n        setFlippedIndexes([])\r\n      }\r\n    }, [flippedIndexes])\r\n  \r\n    const onCardClick = () => {\r\n      if (!game[id].flipped && flippedCount % 3 === 0) {\r\n        set(state => !state)\r\n        setFlippedCount(flippedCount + 1)\r\n        const newIndexes = [...flippedIndexes]\r\n        newIndexes.push(id)\r\n        setFlippedIndexes(newIndexes)\r\n      } else if (\r\n        flippedCount % 3 === 1 &&\r\n        !game[id].flipped &&\r\n        flippedIndexes.indexOf(id) < 0\r\n      ) {\r\n        set(state => !state)\r\n        setFlippedCount(flippedCount + 1)\r\n        const newIndexes = [...flippedIndexes]\r\n        newIndexes.push(id)\r\n        setFlippedIndexes(newIndexes)\r\n      }\r\n    }\r\n  \r\n    return (\r\n      <div onClick={onCardClick}>\r\n        <a.div\r\n          className=\"c back\"\r\n          style={{\r\n            opacity: opacity.interpolate(o => 1 - o),\r\n            transform,\r\n          }}\r\n        />\r\n        <a.div\r\n          className=\"c front\"\r\n          style={{\r\n            opacity,\r\n            transform: transform.interpolate(t => `${t} rotateX(180deg)`),\r\n            backgroundImage:`url(\"${color}\")`\r\n          }}\r\n        />\r\n      </div>\r\n    )\r\n}\r\nexport default Card;","export default __webpack_public_path__ + \"static/media/fring.4efe5c24.jpg\";","export default __webpack_public_path__ + \"static/media/guss.19f32fe5.jpg\";","export default __webpack_public_path__ + \"static/media/hank.d8af0e9a.jpg\";","export default __webpack_public_path__ + \"static/media/hector.bbc9b94a.jpg\";","export default __webpack_public_path__ + \"static/media/Jimmy.37506988.jpg\";","export default __webpack_public_path__ + \"static/media/lydia.72ca1d72.jpg\";","export default __webpack_public_path__ + \"static/media/mike.213a11d5.jpg\";","export default __webpack_public_path__ + \"static/media/pinkman.9afc529e.jpg\";","export default __webpack_public_path__ + \"static/media/skyler.ebf6ee0f.jpg\";","export default __webpack_public_path__ + \"static/media/todd.00fc88a2.jpg\";","export default __webpack_public_path__ + \"static/media/walt.b73c211a.jpg\";","export default __webpack_public_path__ + \"static/media/walter.d9eb0ac8.jpg\";","import React, { useState, useEffect } from 'react';\r\nimport Card from './Card';\r\nimport Fring from '../Images/fring.jpg';\r\nimport Guss from '../Images/guss.jpg';\r\nimport Hank from '../Images/hank.jpg';\r\nimport Hector from '../Images/hector.jpg';\r\nimport Jimmy from '../Images/Jimmy.jpg';\r\nimport Lydia from '../Images/lydia.jpg';\r\nimport Mike from '../Images/mike.jpg';\r\nimport Pinkman from '../Images/pinkman.jpg';\r\nimport Skyler from '../Images/skyler.jpg';\r\nimport Todd from '../Images/todd.jpg';\r\nimport Walt from '../Images/walt.jpg';\r\nimport Walter from  '../Images/walter.jpg';\r\n\r\n\r\nfunction MemoryGame({ options, setOptions, highScore, setHighScore ,startTime,setStartTime}) {\r\n    const [game, setGame] = useState([])\r\n    const [flippedCount, setFlippedCount] = useState(0)\r\n    const [flippedIndexes, setFlippedIndexes] = useState([])\r\n    const colors = [\r\n      Fring, Guss, Hank, Hector, Jimmy, Lydia,\r\n      Mike,Pinkman,Skyler,Todd,Walt,Walter\r\n    ]\r\n    \r\n    useEffect(() => {\r\n      const newGame = []\r\n      for (let i = 0; i < options / 2; i++) {\r\n        const firstOption = {\r\n          id: 2 * i,\r\n          colorId: i,\r\n          color: colors[i],\r\n          flipped: false,\r\n        }\r\n        const secondOption = {\r\n          id: 2 * i + 1,\r\n          colorId: i,\r\n          color: colors[i],\r\n          flipped: false,\r\n        }\r\n  \r\n        newGame.push(firstOption)\r\n        newGame.push(secondOption)\r\n      }\r\n  \r\n      const shuffledGame = newGame.sort(() => Math.random() - 0.5)\r\n      setGame(shuffledGame)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n      // Loads when the game variable changes\r\n        const finished = !game.some(card => !card.flipped)\r\n        if (finished && game.length > 0) {\r\n            setOptions(null)\r\n            alert(`Congratulation ! You won the gameðŸ˜ƒ and you took ${startTime} seconds to complete the game.`)\r\n            window.location.reload()\r\n\r\n        }\r\n    }, [game])\r\n  \r\n    if (flippedIndexes.length === 2) {\r\n      const match = game[flippedIndexes[0]].colorId === game[flippedIndexes[1]].colorId\r\n    \r\n      if (match) {\r\n        const newGame = [...game]\r\n        newGame[flippedIndexes[0]].flipped = true\r\n        newGame[flippedIndexes[1]].flipped = true\r\n        setGame(newGame)\r\n    \r\n        const newIndexes = [...flippedIndexes]\r\n        newIndexes.push(false)\r\n        setFlippedIndexes(newIndexes)\r\n      } else {\r\n        const newIndexes = [...flippedIndexes]\r\n        newIndexes.push(true)\r\n        setFlippedIndexes(newIndexes)\r\n      }\r\n    }\r\n  \r\n    if (game.length === 0) return <div>loading...</div>\r\n    else {\r\n      return (\r\n        <div id=\"cards\">\r\n          {game.map((card, index) => (\r\n            <div className=\"card\" key={index}>\r\n              <Card\r\n                id={index}\r\n                color={card.color}\r\n                game={game}\r\n                flippedCount={flippedCount}\r\n                setFlippedCount={setFlippedCount}\r\n                flippedIndexes={flippedIndexes}\r\n                setFlippedIndexes={setFlippedIndexes}\r\n              />\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )\r\n    }\r\n  }\r\nexport default MemoryGame;","import React, { useState, useEffect } from \"react\";\nimport MemoryGame from './Components/MemoryGame';\nimport './App.css';\n\n\nexport default function App() {\n  const [options, setOptions] = useState(null)\n  const [highScore, setHighScore] = useState(0)\n  const [startTime,setStartTime]=useState(0)\n\n  // useEffect(() => {\n  //   const json = localStorage.getItem('memorygamehighscore')\n  //   const savedScore = JSON.parse(json)\n  //   if (savedScore) {\n  //     setHighScore(savedScore)\n  //   }\n  // }, [])\n  \n    const startTimerHandler = () => {\n      setInterval(() => {\n       setStartTime((startTime) => startTime + 1)\n      }, 1000)\n   }\n  return (\n    <div>\n      <div className=\"container\">\n        <h1>Memory Game <span>Breaking Bad</span></h1>\n        <div>Start Time : {startTime}'sec</div>\n        <div>\n          {options === null ? (\n            <>\n              <button onClick={() => setOptions(12)}>Easy</button>\n              <button onClick={() => setOptions(18)}>Medium</button>\n              <button onClick={() => setOptions(24)}>Hard</button>\n            </>\n          ) : (\n              <>\n                <button onClick={startTimerHandler}>Start Timer</button>\n              <button\n                onClick={() => {\n                  const prevOptions = options\n                  setOptions(null)\n                  setTimeout(() => {\n                    setOptions(prevOptions)\n                  }, 5)\n                }}\n              >\n                Start Over\n              </button>\n              <button onClick={() => setOptions(null)}>Main Menu</button>\n            </>\n          )}\n        </div>\n      </div>\n\n      {options ? (\n        <MemoryGame\n          options={options}\n          setOptions={setOptions}\n          highScore={highScore}\n          setHighScore={setHighScore}\n          startTime={startTime}\n          setStartTime={setStartTime}\n        />\n      ) : (\n          <>\n          <h2>Choose anyone - Easy Medium Hard</h2>\n          </> \n      )}\n    </div>\n  )\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}